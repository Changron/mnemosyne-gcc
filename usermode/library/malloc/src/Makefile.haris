##
## The Hoard Multiprocessor Memory Allocator
## <http://www.hoard.org>
##
## Contact author: Emery Berger, http://www.cs.utexas.edu/users/emery
##
## Copyright (c) 1998 - 2001, The University of Texas at Austin.
##
## This library is free software; you can redistribute it and/or modify
## it under the terms of the GNU Library General Public License as
## published by the Free Software Foundation, http://www.fsf.org.
##
## This library is distributed in the hope that it will be useful, but
## WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
## Library General Public License for more details.
##

# System configuration parameters.
# You can either redefine these variables directly,
# or supply new values as parameters to make, e.g.:
#   make USE_WINDOWS=1 DEBUG=1

USE_ICC=1

LIBS = -L../../../build/library/mnemosyne -lmnemosyne

LIBS += -lpthread

# Code generation.
DEBUG=0
OPTIMIZE=0
PROFILE=0

X86MODEL = pentiumpro
# choices include i386, i486, i586, pentium and pentium pro

# -------------------------------------------------- #
# You don't want to change anything below this line.
# -------------------------------------------------- #

OBJSUFFIX = o

TOBJS = mallocwrap.$(OBJSUFFIX) threadheap.$(OBJSUFFIX) processheap.$(OBJSUFFIX) superblock.$(OBJSUFFIX) wrapper.$(OBJSUFFIX) hoardheap.$(OBJSUFFIX) arch-specific.$(OBJSUFFIX) dlmalloc.$(OBJSUFFIX) persistentheap.$(OBJSUFFIX) persistentsuperblock.$(OBJSUFFIX)
TESTS = ../benchmarks/testmymalloc/testmymalloc.$(OBJSUFFIX) ../benchmarks/threadtest/threadtest.$(OBJSUFFIX) ../benchmarks/cache-scratch/cache-scratch.$(OBJSUFFIX) ../benchmarks/cache-thrash/cache-thrash.$(OBJSUFFIX)

#SRCS = mallocwrap.cpp threadheap.cpp processheap.cpp superblock.cpp wrapper.cpp hoardheap.cpp arch-specific.cpp dlmalloc.c ../benchmarks/testmymalloc/testmymalloc.cpp ../benchmarks/threadtest/threadtest.cpp
SRCS = mallocwrap.cpp threadheap.cpp processheap.cpp superblock.cpp wrapper.cpp hoardheap.cpp arch-specific.cpp dlmalloc.c persistentheap.cpp persistentsuperblock.cpp



#OBJS = $(TOBJS) $(TESTS)
OBJS = $(TOBJS)

ifeq ($(USE_ICC),1)
CC = icc
CXX = icpc
ifeq ($(OPTIMIZE),1)
OPTIMIZE_FLAG = -g -O6 -fno-rtti -fno-exceptions -finline-functions -fomit-frame-pointer
else
OPTIMIZE_FLAG = -fno-inline -g
endif
WARNINGS=-Wall -Wpointer-arith  -Wconversion -Wcast-qual -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Woverloaded-virtual
else
CC = gcc
CXX = g++
ifeq ($(OPTIMIZE),1)
OPTIMIZE_FLAG = -g -O6 -fexpensive-optimizations -fno-rtti -fno-exceptions -finline-functions -fomit-frame-pointer -ffast-math
else
#OPTIMIZE_FLAG = -fno-inline -g
OPTIMIZE_FLAG = -fno-inline -g -fno-exceptions
endif
WARNINGS = -Wall -W -Wundef -Wbad-function-cast -Wpointer-arith -Wcast-align -Wconversion -Wcast-qual -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wnested-externs -Woverloaded-virtual -Wsign-compare -Waggregate-return # -Wold-style-cast
endif

DEFS += -DUSE_SPROC=0

CFLAGS += -I../../mnemosyne/include
CCFLAGS += -I../../mnemosyne/include

CFLAGS += -D_REENTRANT=1
CCFLAGS += -D_REENTRANT=1

ifeq ($(PROFILE),1)
PROFILE_FLAG = -pg # -a
else
PROFILE_FLAG =
endif

ifeq ($(DEBUG),1)
DEBUG_FLAG =
else
DEBUG_FLAG = -DNDEBUG
endif

CFLAGS += $(DEFS) $(PROFILE_FLAG) $(OPTIMIZE_FLAG) $(DEBUG_FLAG)
CCFLAGS += $(DEFS) $(PROFILE_FLAG) $(OPTIMIZE_FLAG) $(DEBUG_FLAG) $(WARNINGS)

LDFLAGS = $(OPT) $(PROFILE_FLAG)


ifeq ($(MACHTYPE), i386)
CFLAGS += -march=$(X86MODEL)
CCFLAGS += -march=$(X86MODEL)
endif

ifeq ($(MACHTYPE), i486)
CFLAGS += -march=$(X86MODEL)
CCFLAGS += -march=$(X86MODEL)
endif

CFLAGS += -fPIC
CCFLAGS += -fPIC

.SUFFIXES: .cpp .c .o .obj

.cpp.o:
	$(CXX) $(CCFLAGS) -I. -c $<

.c.o:
	$(CC) $(CFLAGS) -I. -c $<

.cpp.obj:
	$(CXX) $(CCFLAGS) -c $<

.c.obj:
	$(CC) $(CFLAGS) -c $<

AR = ar
RANLIB = ranlib

LINKFLAGS=-T ../../../util/linker_script_persistent_segment_m64


#all:    libhoard.a libhoard.so testmymalloc-hoard testmymalloc threadtest threadtest-hoard cache-scratch cache-scratch-hoard cache-thrash cache-thrash-hoard
all:    libhoard.a libhoard.so mytest

mytest: $(OBJS) $(SRCS) mytest.o
	$(CXX) $(LINKFLAGS) $(LDFLAGS) -g -o $@ mytest.$(OBJSUFFIX)  $(LIBS) -L. -lhoard

libhoard.a: $(TOBJS)
	ar cr libhoard.a $(TOBJS)

libhoard.so: $(TOBJS)
	icpc $(LINKFLAGS) -shared -o libhoard.so $(TOBJS)

testmymalloc: $(OBJS) $(SRCS)
	$(CXX) $(LDFLAGS) -o $@ testmymalloc.$(OBJSUFFIX) $(LIBS) 

testmymalloc-hoard: $(OBJS) $(SRCS)
	$(CXX) $(LDFLAGS) -o $@ testmymalloc.$(OBJSUFFIX) libhoard.a $(LIBS)

threadtest: $(OBJS) $(SRCS) threadtest.$(OBJSUFFIX)
	$(CXX) $(LDFLAGS) -o $@ threadtest.$(OBJSUFFIX) dlmalloc.$(OBJSUFFIX) arch-specific.$(OBJSUFFIX) $(LIBS)

threadtest-hoard: $(OBJS) $(SRCS) threadtest.$(OBJSUFFIX)
	$(CXX) $(LDFLAGS) -o $@ threadtest.$(OBJSUFFIX) libhoard.a $(LIBS)

cache-scratch: $(OBJS) $(SRCS) cache-scratch.$(OBJSUFFIX)
	$(CXX) $(LDFLAGS) -o $@ cache-scratch.$(OBJSUFFIX) dlmalloc.$(OBJSUFFIX) arch-specific.$(OBJSUFFIX) $(LIBS)

cache-scratch-hoard: $(OBJS) $(SRCS) cache-scratch.$(OBJSUFFIX)
	$(CXX) $(LDFLAGS) -o $@ cache-scratch.$(OBJSUFFIX) libhoard.a $(LIBS)

cache-scratch-mtmalloc: $(OBJS) $(SRCS) cache-scratch.$(OBJSUFFIX)
	$(CXX) $(LDFLAGS) -o $@ arch-specific.$(OBJSUFFIX) cache-scratch.$(OBJSUFFIX) $(LIBS) -lmtmalloc

cache-scratch-ptmalloc: $(OBJS) $(SRCS) cache-scratch.$(OBJSUFFIX)
	$(CXX) -o $@ ../allocators/ptmalloc/ptmalloc.$(OBJSUFFIX) arch-specific.$(OBJSUFFIX) $(LDFLAGS) cache-scratch.$(OBJSUFFIX) $(LIBS)

cache-thrash: $(OBJS) $(SRCS) cache-thrash.$(OBJSUFFIX)
	$(CXX) -o $@ $(LDFLAGS) cache-thrash.$(OBJSUFFIX) dlmalloc.$(OBJSUFFIX) arch-specific.$(OBJSUFFIX) $(LIBS)

cache-thrash-hoard: $(OBJS) $(SRCS) cache-thrash.$(OBJSUFFIX)
	$(CXX) -o $@ $(LDFLAGS) cache-thrash.$(OBJSUFFIX) libhoard.a $(LIBS)

cache-thrash-mtmalloc: $(OBJS) $(SRCS) cache-thrash.$(OBJSUFFIX)
	$(CXX) $(LDFLAGS) arch-specific.$(OBJSUFFIX) cache-thrash.$(OBJSUFFIX) $(LIBS) -lmtmalloc -o $@

cache-thrash-ptmalloc: $(OBJS) $(SRCS) cache-thrash.$(OBJSUFFIX)
	$(CXX) -o $@ ../allocators/ptmalloc/ptmalloc.$(OBJSUFFIX) arch-specific.$(OBJSUFFIX) $(LDFLAGS) cache-thrash.$(OBJSUFFIX) $(LIBS)

threadtest-ptmalloc: $(OBJS) $(SRCS) threadtest.$(OBJSUFFIX)
	$(CXX) -o $@ ../allocators/ptmalloc/ptmalloc.$(OBJSUFFIX) arch-specific.$(OBJSUFFIX) $(LDFLAGS) threadtest.$(OBJSUFFIX) $(LIBS)

threadtest-mtmalloc: $(OBJS) $(SRCS) threadtest.$(OBJSUFFIX)
	$(CXX) -o $@ $(LDFLAGS) arch-specific.$(OBJSUFFIX) threadtest.$(OBJSUFFIX) $(LIBS) -lmtmalloc

mlog:	mlog.cpp 
	$(CXX) $(CCFLAGS) $(LDFLAGS) mlog.cpp -o mlog

mergelogs:	mergelogs.cpp 
	$(CXX) $(CCFLAGS) $(LDFLAGS) mergelogs.cpp -o mergelogs

clean:
	rm -f $(OBJS) $(ALLOCATORS) *.a testmymalloc testmymalloc-hoard testmymalloc-pt testmymalloc-dl threadtest threadtest-hoard threadtest-dl threadtest-ptmalloc core *.cc.* *.c.* *.$(OBJSUFFIX)

tags:
	etags --c++ *.[cChH]

depend:
	makedepend -Y. -- $(SRCS)

consume:	libhoard.a consume.cpp
	$(CXX) $(CCFLAGS) libhoard.a consume.cpp $(LIBS) -o consume

testmymalloc.$(OBJSUFFIX): testmymalloc.cpp

# DO NOT DELETE

testmymalloc.$(OBJSUFFIX): timer.h
threadheap.$(OBJSUFFIX): config.h hoardheap.h   superblock.h block.h heapstats.h threadheap.h  
threadheap.$(OBJSUFFIX): persistentheap.h  processheap.h
processheap.$(OBJSUFFIX): config.h threadheap.h   hoardheap.h   superblock.h block.h heapstats.h
processheap.$(OBJSUFFIX): processheap.h  
superblock.$(OBJSUFFIX): config.h hoardheap.h   superblock.h block.h heapstats.h
wrapper.$(OBJSUFFIX): config.h threadheap.h   hoardheap.h   superblock.h block.h heapstats.h
wrapper.$(OBJSUFFIX): persistentheap.h processheap.h 
threadtest.$(OBJSUFFIX): timer.h
hoardheap.$(OBJSUFFIX): config.h hoardheap.h   superblock.h block.h heapstats.h
persistentheap.$(OBJSUFFIX): persistentheap.h persistentsuperblock.h config.h threadheap.h   hoardheap.h   superblock.h block.h heapstats.h

persistentsuperblock.$(OBJSUFFIX): persistentsuperblock.h

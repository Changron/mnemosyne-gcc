import os

Import('env')
buildEnv = env.Clone()

buildEnv.Append(CCFLAGS = '-DHAVE_CONFIG_H -Wall -pthread')

if buildEnv['BUILD_DEBUG'] == True:
	buildEnv.Append(CCFLAGS = ' -g -D_MNEMOSYNE_BUILD_DEBUG')
else:
	buildEnv.Append(CCFLAGS = ' -O2')

if buildEnv['HAVE_STATS'] == True:
	buildEnv.Append(CCFLAGS = ' -D_MNEMOSYNE_HAVE_STATS')


buildEnv['CPPPATH'] = ['#src/']
buildEnv.Append(LIBS = 'elf')

if env['ARCH'] == 'x86':
	buildEnv.Append(CCFLAGS = ' -m32')
	buildEnv.Append(LINKFLAGS = ' -T '+ buildEnv['MY_UTIL_DIR'] + '/linker_script_persistent_segment_m32')
elif env['ARCH'] == 'x86_64':
	buildEnv.Append(CCFLAGS = ' -m64 ')
	buildEnv.Append(LINKFLAGS = ' -T '+ buildEnv['MY_UTIL_DIR'] + '/linker_script_persistent_segment_m64')


C_SRC = Split("""common/config.c
                 common/debug.c
                 common/init.c
                 persistent/address_space.c
                 persistent/malloc.c
                 persistent/segment.c
              """)

SConscript('#src/mtm/SConscript', variant_dir = os.path.join(env['MY_BUILD_DIR'], 'mtm'))

SRC = C_SRC

if buildEnv['LINKAGE'] == 'dynamic':
	MnemosyneLibrary = buildEnv.SharedLibrary(buildEnv['LIBRARY_NAME'], SRC)
elif buildEnv['LINKAGE'] == 'static':
	MnemosyneLibrary = buildEnv.StaticLibrary(buildEnv['LIBRARY_NAME'], SRC)
Return('MnemosyneLibrary')

